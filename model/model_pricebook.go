/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

type Offer struct {
	Price *float64 `json:"price,omitempty,string"`
	Size *float64 `json:"size,omitempty,string"`
}

// PriceBook struct for GetProductBookResponse
type PriceBook struct {
	Asks []Offer `json:"asks,omitempty"`
	Bids []Offer `json:"bids,omitempty"`
	ProductId *string `json:"product_id,omitempty"`
	Time 	*string `json:"time,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

// NewPriceBook instantiates a new PriceBook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceBook() *PriceBook {
	this := PriceBook{}
	return &this
}

// NewPriceBookWithDefaults instantiates a new PriceBook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceBookWithDefaults() *PriceBook {
	this := PriceBook{
		Asks: make([]Offer, 0),
		Bids: make([]Offer, 0),
	}
	return &this
}


// GetAsks returns the Asks field value if set, zero value otherwise.
func (o *PriceBook) GetAsks() []Offer {
	if o == nil || isNil(o.Asks) {
		var ret []Offer
		return ret
	}
	return o.Asks
}

// GetAsksOk returns a tuple with the Asks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceBook) GetAsksOk() ([]Offer, bool) {
	if o == nil || isNil(o.Asks) {
    return nil, false
	}
	return o.Asks, true
}

// HasAsks returns a boolean if a field has been set.
func (o *PriceBook) HasAsks() bool {
	if o != nil && !isNil(o.Asks) {
		return true
	}

	return false
}

// SetAsks gets a reference to the given []Offer and assigns it to the Asks field.
func (o *PriceBook) SetAsks(v []Offer) {
	o.Asks = v
}


// GetBids returns the Bids field value if set, zero value otherwise.
func (o *PriceBook) GetBids() []Offer {
	if o == nil || isNil(o.Bids) {
		var ret []Offer
		return ret
	}
	return o.Bids
}

// GetBidsOk returns a tuple with the Bids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceBook) GetBidsOk() ([]Offer, bool) {
	if o == nil || isNil(o.Bids) {
    return nil, false
	}
	return o.Bids, true
}

// HasBids returns a boolean if a field has been set.
func (o *PriceBook) HasBids() bool {
	if o != nil && !isNil(o.Bids) {
		return true
	}

	return false
}

// SetBids gets a reference to the given []Offer and assigns it to the Bids field.
func (o *PriceBook) SetBids(v []Offer) {
	o.Bids = v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *PriceBook) GetCursor() string {
	if o == nil || isNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceBook) GetCursorOk() (*string, bool) {
	if o == nil || isNil(o.Cursor) {
    return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *PriceBook) HasCursor() bool {
	if o != nil && !isNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *PriceBook) SetCursor(v string) {
	o.Cursor = &v
}

func (o PriceBook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Asks) {
		toSerialize["asks"] = o.Asks
	}
	if !isNil(o.Bids) {
		toSerialize["bids"] = o.Bids
	}
	if !isNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	return json.Marshal(toSerialize)
}

type NullablePriceBook struct {
	value *PriceBook
	isSet bool
}

func (v NullablePriceBook) Get() *PriceBook {
	return v.value
}

func (v *NullablePriceBook) Set(val *PriceBook) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceBook) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceBook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceBook(val *PriceBook) *NullablePriceBook {
	return &NullablePriceBook{value: val, isSet: true}
}

func (v NullablePriceBook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceBook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


